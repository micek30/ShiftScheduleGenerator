#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ShiftGenerator
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ShiftScheduleDB")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    partial void InsertLawRequirement(LawRequirement instance);
    partial void UpdateLawRequirement(LawRequirement instance);
    partial void DeleteLawRequirement(LawRequirement instance);
    partial void InsertFTE(FTE instance);
    partial void UpdateFTE(FTE instance);
    partial void DeleteFTE(FTE instance);
    partial void InsertEmpRequest(EmpRequest instance);
    partial void UpdateEmpRequest(EmpRequest instance);
    partial void DeleteEmpRequest(EmpRequest instance);
    partial void InsertEmpRequirement(EmpRequirement instance);
    partial void UpdateEmpRequirement(EmpRequirement instance);
    partial void DeleteEmpRequirement(EmpRequirement instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::ShiftGenerator.Properties.Settings.Default.ShiftScheduleDBConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Team> Teams
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
		
		public System.Data.Linq.Table<LawRequirement> LawRequirements
		{
			get
			{
				return this.GetTable<LawRequirement>();
			}
		}
		
		public System.Data.Linq.Table<FTE> FTEs
		{
			get
			{
				return this.GetTable<FTE>();
			}
		}
		
		public System.Data.Linq.Table<EmpRequest> EmpRequests
		{
			get
			{
				return this.GetTable<EmpRequest>();
			}
		}
		
		public System.Data.Linq.Table<EmpRequirement> EmpRequirements
		{
			get
			{
				return this.GetTable<EmpRequirement>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employees")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idEmployee;
		
		private string _name;
		
		private string _surname;
		
		private string _jobContract;
		
		private System.Nullable<int> _idTeam;
		
		private System.Nullable<bool> _independent;
		
		private string _frenchlvl;
		
		private System.Nullable<int> _idUser;
		
		private EntitySet<FTE> _FTEs;
		
		private EntitySet<EmpRequest> _EmpRequests;
		
		private EntitySet<EmpRequirement> _EmpRequirements;
		
		private EntityRef<User> _User;
		
		private EntityRef<Team> _Team;
		
        public List<Employee> getAllEmployee()
        {
            DataClasses1DataContext data = new DataClasses1DataContext();
            var result = from emp in data.Employees
                         orderby emp.idTeam
                         select emp;
            return result.ToList();
        }
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidEmployeeChanging(int value);
    partial void OnidEmployeeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnsurnameChanging(string value);
    partial void OnsurnameChanged();
    partial void OnjobContractChanging(string value);
    partial void OnjobContractChanged();
    partial void OnidTeamChanging(System.Nullable<int> value);
    partial void OnidTeamChanged();
    partial void OnindependentChanging(System.Nullable<bool> value);
    partial void OnindependentChanged();
    partial void OnfrenchlvlChanging(string value);
    partial void OnfrenchlvlChanged();
    partial void OnidUserChanging(System.Nullable<int> value);
    partial void OnidUserChanged();
    #endregion
		
		public Employee()
		{
			this._FTEs = new EntitySet<FTE>(new Action<FTE>(this.attach_FTEs), new Action<FTE>(this.detach_FTEs));
			this._EmpRequests = new EntitySet<EmpRequest>(new Action<EmpRequest>(this.attach_EmpRequests), new Action<EmpRequest>(this.detach_EmpRequests));
			this._EmpRequirements = new EntitySet<EmpRequirement>(new Action<EmpRequirement>(this.attach_EmpRequirements), new Action<EmpRequirement>(this.detach_EmpRequirements));
			this._User = default(EntityRef<User>);
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEmployee", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idEmployee
		{
			get
			{
				return this._idEmployee;
			}
			set
			{
				if ((this._idEmployee != value))
				{
					this.OnidEmployeeChanging(value);
					this.SendPropertyChanging();
					this._idEmployee = value;
					this.SendPropertyChanged("idEmployee");
					this.OnidEmployeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_surname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string surname
		{
			get
			{
				return this._surname;
			}
			set
			{
				if ((this._surname != value))
				{
					this.OnsurnameChanging(value);
					this.SendPropertyChanging();
					this._surname = value;
					this.SendPropertyChanged("surname");
					this.OnsurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_jobContract", DbType="VarChar(20)")]
		public string jobContract
		{
			get
			{
				return this._jobContract;
			}
			set
			{
				if ((this._jobContract != value))
				{
					this.OnjobContractChanging(value);
					this.SendPropertyChanging();
					this._jobContract = value;
					this.SendPropertyChanged("jobContract");
					this.OnjobContractChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTeam", DbType="Int")]
		public System.Nullable<int> idTeam
		{
			get
			{
				return this._idTeam;
			}
			set
			{
				if ((this._idTeam != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidTeamChanging(value);
					this.SendPropertyChanging();
					this._idTeam = value;
					this.SendPropertyChanged("idTeam");
					this.OnidTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_independent", DbType="Bit")]
		public System.Nullable<bool> independent
		{
			get
			{
				return this._independent;
			}
			set
			{
				if ((this._independent != value))
				{
					this.OnindependentChanging(value);
					this.SendPropertyChanging();
					this._independent = value;
					this.SendPropertyChanged("independent");
					this.OnindependentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_frenchlvl", DbType="VarChar(5)")]
		public string frenchlvl
		{
			get
			{
				return this._frenchlvl;
			}
			set
			{
				if ((this._frenchlvl != value))
				{
					this.OnfrenchlvlChanging(value);
					this.SendPropertyChanging();
					this._frenchlvl = value;
					this.SendPropertyChanged("frenchlvl");
					this.OnfrenchlvlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idUser", DbType="Int")]
		public System.Nullable<int> idUser
		{
			get
			{
				return this._idUser;
			}
			set
			{
				if ((this._idUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidUserChanging(value);
					this.SendPropertyChanging();
					this._idUser = value;
					this.SendPropertyChanged("idUser");
					this.OnidUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_FTE", Storage="_FTEs", ThisKey="idEmployee", OtherKey="idEmployee")]
		public EntitySet<FTE> FTEs
		{
			get
			{
				return this._FTEs;
			}
			set
			{
				this._FTEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmpRequest", Storage="_EmpRequests", ThisKey="idEmployee", OtherKey="idEmployee")]
		public EntitySet<EmpRequest> EmpRequests
		{
			get
			{
				return this._EmpRequests;
			}
			set
			{
				this._EmpRequests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmpRequirement", Storage="_EmpRequirements", ThisKey="idEmployee", OtherKey="idEmployee")]
		public EntitySet<EmpRequirement> EmpRequirements
		{
			get
			{
				return this._EmpRequirements;
			}
			set
			{
				this._EmpRequirements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Employee", Storage="_User", ThisKey="idUser", OtherKey="idUser", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._idUser = value.idUser;
					}
					else
					{
						this._idUser = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Employee", Storage="_Team", ThisKey="idTeam", OtherKey="idTeam", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._idTeam = value.idTeam;
					}
					else
					{
						this._idTeam = default(Nullable<int>);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FTEs(FTE entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_FTEs(FTE entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_EmpRequests(EmpRequest entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmpRequests(EmpRequest entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_EmpRequirements(EmpRequirement entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmpRequirements(EmpRequirement entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idUser;
		
		private string _password;
		
		private string _permission;
		
		private string _login;
		
		private EntitySet<Employee> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidUserChanging(int value);
    partial void OnidUserChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnpermissionChanging(string value);
    partial void OnpermissionChanged();
    partial void OnloginChanging(string value);
    partial void OnloginChanged();
    #endregion
		
		public User()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idUser", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idUser
		{
			get
			{
				return this._idUser;
			}
			set
			{
				if ((this._idUser != value))
				{
					this.OnidUserChanging(value);
					this.SendPropertyChanging();
					this._idUser = value;
					this.SendPropertyChanged("idUser");
					this.OnidUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(20)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_permission", DbType="VarChar(10)")]
		public string permission
		{
			get
			{
				return this._permission;
			}
			set
			{
				if ((this._permission != value))
				{
					this.OnpermissionChanging(value);
					this.SendPropertyChanging();
					this._permission = value;
					this.SendPropertyChanged("permission");
					this.OnpermissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_login", DbType="VarChar(50)")]
		public string login
		{
			get
			{
				return this._login;
			}
			set
			{
				if ((this._login != value))
				{
					this.OnloginChanging(value);
					this.SendPropertyChanging();
					this._login = value;
					this.SendPropertyChanged("login");
					this.OnloginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Employee", Storage="_Employees", ThisKey="idUser", OtherKey="idUser")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teams")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idTeam;
		
		private string _nameTeam;
		
		private System.Nullable<int> _countEmp;
		
		private EntitySet<Employee> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidTeamChanging(int value);
    partial void OnidTeamChanged();
    partial void OnnameTeamChanging(string value);
    partial void OnnameTeamChanged();
    partial void OncountEmpChanging(System.Nullable<int> value);
    partial void OncountEmpChanged();
    #endregion
		
		public Team()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTeam", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idTeam
		{
			get
			{
				return this._idTeam;
			}
			set
			{
				if ((this._idTeam != value))
				{
					this.OnidTeamChanging(value);
					this.SendPropertyChanging();
					this._idTeam = value;
					this.SendPropertyChanged("idTeam");
					this.OnidTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nameTeam", DbType="VarChar(20)")]
		public string nameTeam
		{
			get
			{
				return this._nameTeam;
			}
			set
			{
				if ((this._nameTeam != value))
				{
					this.OnnameTeamChanging(value);
					this.SendPropertyChanging();
					this._nameTeam = value;
					this.SendPropertyChanged("nameTeam");
					this.OnnameTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_countEmp", DbType="Int")]
		public System.Nullable<int> countEmp
		{
			get
			{
				return this._countEmp;
			}
			set
			{
				if ((this._countEmp != value))
				{
					this.OncountEmpChanging(value);
					this.SendPropertyChanging();
					this._countEmp = value;
					this.SendPropertyChanged("countEmp");
					this.OncountEmpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Employee", Storage="_Employees", ThisKey="idTeam", OtherKey="idTeam")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LawRequirements")]
	public partial class LawRequirement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idRequirements;
		
		private string _reqDesc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidRequirementsChanging(int value);
    partial void OnidRequirementsChanged();
    partial void OnreqDescChanging(string value);
    partial void OnreqDescChanged();
    #endregion
		
		public LawRequirement()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idRequirements", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idRequirements
		{
			get
			{
				return this._idRequirements;
			}
			set
			{
				if ((this._idRequirements != value))
				{
					this.OnidRequirementsChanging(value);
					this.SendPropertyChanging();
					this._idRequirements = value;
					this.SendPropertyChanged("idRequirements");
					this.OnidRequirementsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reqDesc", DbType="VarChar(MAX)")]
		public string reqDesc
		{
			get
			{
				return this._reqDesc;
			}
			set
			{
				if ((this._reqDesc != value))
				{
					this.OnreqDescChanging(value);
					this.SendPropertyChanging();
					this._reqDesc = value;
					this.SendPropertyChanged("reqDesc");
					this.OnreqDescChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FTE")]
	public partial class FTE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idFTE;
		
		private System.Nullable<int> _idEmployee;
		
		private System.Nullable<double> _dimension;
		
		private System.Nullable<int> _workingHours;
		
		private System.Nullable<int> _workingHoursLast;
		
		private System.Nullable<int> _SPM;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidFTEChanging(int value);
    partial void OnidFTEChanged();
    partial void OnidEmployeeChanging(System.Nullable<int> value);
    partial void OnidEmployeeChanged();
    partial void OndimensionChanging(System.Nullable<double> value);
    partial void OndimensionChanged();
    partial void OnworkingHoursChanging(System.Nullable<int> value);
    partial void OnworkingHoursChanged();
    partial void OnworkingHoursLastChanging(System.Nullable<int> value);
    partial void OnworkingHoursLastChanged();
    partial void OnSPMChanging(System.Nullable<int> value);
    partial void OnSPMChanged();
    #endregion
		
		public FTE()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idFTE", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idFTE
		{
			get
			{
				return this._idFTE;
			}
			set
			{
				if ((this._idFTE != value))
				{
					this.OnidFTEChanging(value);
					this.SendPropertyChanging();
					this._idFTE = value;
					this.SendPropertyChanged("idFTE");
					this.OnidFTEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEmployee", DbType="Int")]
		public System.Nullable<int> idEmployee
		{
			get
			{
				return this._idEmployee;
			}
			set
			{
				if ((this._idEmployee != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidEmployeeChanging(value);
					this.SendPropertyChanging();
					this._idEmployee = value;
					this.SendPropertyChanged("idEmployee");
					this.OnidEmployeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dimension", DbType="Float")]
		public System.Nullable<double> dimension
		{
			get
			{
				return this._dimension;
			}
			set
			{
				if ((this._dimension != value))
				{
					this.OndimensionChanging(value);
					this.SendPropertyChanging();
					this._dimension = value;
					this.SendPropertyChanged("dimension");
					this.OndimensionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_workingHours", DbType="Int")]
		public System.Nullable<int> workingHours
		{
			get
			{
				return this._workingHours;
			}
			set
			{
				if ((this._workingHours != value))
				{
					this.OnworkingHoursChanging(value);
					this.SendPropertyChanging();
					this._workingHours = value;
					this.SendPropertyChanged("workingHours");
					this.OnworkingHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_workingHoursLast", DbType="Int")]
		public System.Nullable<int> workingHoursLast
		{
			get
			{
				return this._workingHoursLast;
			}
			set
			{
				if ((this._workingHoursLast != value))
				{
					this.OnworkingHoursLastChanging(value);
					this.SendPropertyChanging();
					this._workingHoursLast = value;
					this.SendPropertyChanged("workingHoursLast");
					this.OnworkingHoursLastChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SPM", DbType="Int")]
		public System.Nullable<int> SPM
		{
			get
			{
				return this._SPM;
			}
			set
			{
				if ((this._SPM != value))
				{
					this.OnSPMChanging(value);
					this.SendPropertyChanging();
					this._SPM = value;
					this.SendPropertyChanged("SPM");
					this.OnSPMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_FTE", Storage="_Employee", ThisKey="idEmployee", OtherKey="idEmployee", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.FTEs.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.FTEs.Add(this);
						this._idEmployee = value.idEmployee;
					}
					else
					{
						this._idEmployee = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmpRequests")]
	public partial class EmpRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idEmpRequest;
		
		private System.Nullable<int> _idEmployee;
		
		private string _reqDesc;
		
		private System.Nullable<System.DateTime> _dateReq;
		
		private string _dayNight;
		
		private string _accepted;
		
		private System.Nullable<bool> _fulfilled;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidEmpRequestChanging(int value);
    partial void OnidEmpRequestChanged();
    partial void OnidEmployeeChanging(System.Nullable<int> value);
    partial void OnidEmployeeChanged();
    partial void OnreqDescChanging(string value);
    partial void OnreqDescChanged();
    partial void OndateReqChanging(System.Nullable<System.DateTime> value);
    partial void OndateReqChanged();
    partial void OndayNightChanging(string value);
    partial void OndayNightChanged();
    partial void OnacceptedChanging(string value);
    partial void OnacceptedChanged();
    partial void OnfulfilledChanging(System.Nullable<bool> value);
    partial void OnfulfilledChanged();
    #endregion
		
		public EmpRequest()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEmpRequest", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idEmpRequest
		{
			get
			{
				return this._idEmpRequest;
			}
			set
			{
				if ((this._idEmpRequest != value))
				{
					this.OnidEmpRequestChanging(value);
					this.SendPropertyChanging();
					this._idEmpRequest = value;
					this.SendPropertyChanged("idEmpRequest");
					this.OnidEmpRequestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEmployee", DbType="Int")]
		public System.Nullable<int> idEmployee
		{
			get
			{
				return this._idEmployee;
			}
			set
			{
				if ((this._idEmployee != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidEmployeeChanging(value);
					this.SendPropertyChanging();
					this._idEmployee = value;
					this.SendPropertyChanged("idEmployee");
					this.OnidEmployeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reqDesc", DbType="VarChar(50)")]
		public string reqDesc
		{
			get
			{
				return this._reqDesc;
			}
			set
			{
				if ((this._reqDesc != value))
				{
					this.OnreqDescChanging(value);
					this.SendPropertyChanging();
					this._reqDesc = value;
					this.SendPropertyChanged("reqDesc");
					this.OnreqDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateReq", DbType="Date")]
		public System.Nullable<System.DateTime> dateReq
		{
			get
			{
				return this._dateReq;
			}
			set
			{
				if ((this._dateReq != value))
				{
					this.OndateReqChanging(value);
					this.SendPropertyChanging();
					this._dateReq = value;
					this.SendPropertyChanged("dateReq");
					this.OndateReqChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dayNight", DbType="VarChar(1)")]
		public string dayNight
		{
			get
			{
				return this._dayNight;
			}
			set
			{
				if ((this._dayNight != value))
				{
					this.OndayNightChanging(value);
					this.SendPropertyChanging();
					this._dayNight = value;
					this.SendPropertyChanged("dayNight");
					this.OndayNightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accepted", DbType="VarChar(10)")]
		public string accepted
		{
			get
			{
				return this._accepted;
			}
			set
			{
				if ((this._accepted != value))
				{
					this.OnacceptedChanging(value);
					this.SendPropertyChanging();
					this._accepted = value;
					this.SendPropertyChanged("accepted");
					this.OnacceptedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fulfilled", DbType="Bit")]
		public System.Nullable<bool> fulfilled
		{
			get
			{
				return this._fulfilled;
			}
			set
			{
				if ((this._fulfilled != value))
				{
					this.OnfulfilledChanging(value);
					this.SendPropertyChanging();
					this._fulfilled = value;
					this.SendPropertyChanged("fulfilled");
					this.OnfulfilledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmpRequest", Storage="_Employee", ThisKey="idEmployee", OtherKey="idEmployee", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmpRequests.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmpRequests.Add(this);
						this._idEmployee = value.idEmployee;
					}
					else
					{
						this._idEmployee = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmpRequirements")]
	public partial class EmpRequirement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idEmpRequirements;
		
		private System.Nullable<int> _idEmployee;
		
		private string _reqDesc;
		
		private System.Nullable<System.DateTime> _dateReq;
		
		private string _dayNight;
		
		private System.Nullable<bool> _fulfilled;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidEmpRequirementsChanging(int value);
    partial void OnidEmpRequirementsChanged();
    partial void OnidEmployeeChanging(System.Nullable<int> value);
    partial void OnidEmployeeChanged();
    partial void OnreqDescChanging(string value);
    partial void OnreqDescChanged();
    partial void OndateReqChanging(System.Nullable<System.DateTime> value);
    partial void OndateReqChanged();
    partial void OndayNightChanging(string value);
    partial void OndayNightChanged();
    partial void OnfulfilledChanging(System.Nullable<bool> value);
    partial void OnfulfilledChanged();
    #endregion
		
		public EmpRequirement()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEmpRequirements", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idEmpRequirements
		{
			get
			{
				return this._idEmpRequirements;
			}
			set
			{
				if ((this._idEmpRequirements != value))
				{
					this.OnidEmpRequirementsChanging(value);
					this.SendPropertyChanging();
					this._idEmpRequirements = value;
					this.SendPropertyChanged("idEmpRequirements");
					this.OnidEmpRequirementsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEmployee", DbType="Int")]
		public System.Nullable<int> idEmployee
		{
			get
			{
				return this._idEmployee;
			}
			set
			{
				if ((this._idEmployee != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidEmployeeChanging(value);
					this.SendPropertyChanging();
					this._idEmployee = value;
					this.SendPropertyChanged("idEmployee");
					this.OnidEmployeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reqDesc", DbType="VarChar(50)")]
		public string reqDesc
		{
			get
			{
				return this._reqDesc;
			}
			set
			{
				if ((this._reqDesc != value))
				{
					this.OnreqDescChanging(value);
					this.SendPropertyChanging();
					this._reqDesc = value;
					this.SendPropertyChanged("reqDesc");
					this.OnreqDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateReq", DbType="Date")]
		public System.Nullable<System.DateTime> dateReq
		{
			get
			{
				return this._dateReq;
			}
			set
			{
				if ((this._dateReq != value))
				{
					this.OndateReqChanging(value);
					this.SendPropertyChanging();
					this._dateReq = value;
					this.SendPropertyChanged("dateReq");
					this.OndateReqChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dayNight", DbType="VarChar(1)")]
		public string dayNight
		{
			get
			{
				return this._dayNight;
			}
			set
			{
				if ((this._dayNight != value))
				{
					this.OndayNightChanging(value);
					this.SendPropertyChanging();
					this._dayNight = value;
					this.SendPropertyChanged("dayNight");
					this.OndayNightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fulfilled", DbType="Bit")]
		public System.Nullable<bool> fulfilled
		{
			get
			{
				return this._fulfilled;
			}
			set
			{
				if ((this._fulfilled != value))
				{
					this.OnfulfilledChanging(value);
					this.SendPropertyChanging();
					this._fulfilled = value;
					this.SendPropertyChanged("fulfilled");
					this.OnfulfilledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmpRequirement", Storage="_Employee", ThisKey="idEmployee", OtherKey="idEmployee", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmpRequirements.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmpRequirements.Add(this);
						this._idEmployee = value.idEmployee;
					}
					else
					{
						this._idEmployee = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
